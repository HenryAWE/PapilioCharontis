<?xml version="1.0" encoding="utf-8"?>

<!--
Debug Visualizer for Papilio Charontis
Copyright (c) HenryAWE
License: MIT

WARNING: This file relies on some undocumented APIs.
It will not work as intended if Visual Studio and STL get a breaking change.

You can check https://github.com/microsoft/STL/blob/main/stl/debugger/STL.natvis for details.
-->

<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
    <Type Name="papilio::reverse_index_t">
        <DisplayString>reverse_index</DisplayString>
    </Type>

    <Type Name="papilio::slice">
        <DisplayString IncludeView="noparens" Condition="second == npos">{first}, npos</DisplayString>
        <DisplayString ExcludeView="noparens" Condition="second == npos">({first}, npos)</DisplayString>
        <DisplayString IncludeView="noparens" Condition="second != npos">{first}, {second}</DisplayString>
        <DisplayString ExcludeView="noparens" Condition="second != npos">({first}, {second})</DisplayString>
        <Expand>
            <Item Name="first">first</Item>
            <Item Name="second">second</Item>
        </Expand>
    </Type>

    <Type Name="papilio::detail::compressed_pair_impl&lt;*,*,0&gt;">
        <Intrinsic Name="first" Expression="m_first" />
        <Intrinsic Name="second" Expression="m_second" />
        <DisplayString IncludeView="noparens">{first()}, {second()}</DisplayString>
        <DisplayString ExcludeView="noparens">({first()}, {second()})</DisplayString>
        <Expand>
            <Item Name="first">m_first</Item>
            <Item Name="second">m_second</Item>
        </Expand>
    </Type>
    <Type Name="papilio::detail::compressed_pair_impl&lt;*,*,1&gt;">
        <Intrinsic Name="first" Expression="*($T1*)this" />
        <Intrinsic Name="second" Expression="m_second" />
        <DisplayString IncludeView="noparens">{first()}, {second()}</DisplayString>
        <DisplayString ExcludeView="noparens">({first()}, {second()})</DisplayString>
        <Expand>
            <Item Name="first">first()</Item>
            <Item Name="second">m_second</Item>
        </Expand>
    </Type>
    <Type Name="papilio::detail::compressed_pair_impl&lt;*,*,2&gt;">
        <Intrinsic Name="first" Expression="m_first" />
        <Intrinsic Name="second" Expression="*($T2*)this" />
        <DisplayString IncludeView="noparens">{first()}, {second()}</DisplayString>
        <DisplayString ExcludeView="noparens">({first()}, {second()})</DisplayString>
        <Expand>
            <Item Name="first">m_first</Item>
            <Item Name="second">second()</Item>
        </Expand>
    </Type>
    <Type Name="papilio::detail::compressed_pair_impl&lt;*,*,3&gt;">
        <Intrinsic Name="first" Expression="*($T1*)this" />
        <Intrinsic Name="second" Expression="*($T2*)this" />
        <DisplayString IncludeView="noparens">{first()}, {second()}</DisplayString>
        <DisplayString ExcludeView="noparens">({first()}, {second()})</DisplayString>
        <Expand>
            <Item Name="first">first()</Item>
            <Item Name="second">second()</Item>
        </Expand>
    </Type>

    <Type Name="papilio::optional_unique_ptr&lt;void,*&gt;">
        <SmartPointer Usage="Minimal">m_ptr</SmartPointer>
        <DisplayString Condition="m_ptr == 0">empty</DisplayString>
        <DisplayString Condition="m_ptr != 0 &amp;&amp; m_has_ownership">optional_unique_ptr void [has ownership]</DisplayString>
        <DisplayString Condition="m_ptr != 0 &amp;&amp; !m_has_ownership">optional_unique_ptr void [observer]</DisplayString>
        <Expand>
            <Item Condition="m_ptr != 0" Name="[ptr]">m_ptr</Item>
            <Item Condition="m_ptr != 0" Name="[has ownership]">m_has_ownership</Item>
            <Item Condition="m_ptr != 0" Name="[deleter]">m_del</Item>
        </Expand>
    </Type>
    <Type Name="papilio::optional_unique_ptr&lt;*&gt;">
        <SmartPointer Usage="Minimal">m_ptr</SmartPointer>
        <DisplayString Condition="m_ptr == 0">empty</DisplayString>
        <DisplayString Condition="m_ptr != 0 &amp;&amp; m_has_ownership">optional_unique_ptr {*m_ptr} [has ownership]</DisplayString>
        <DisplayString Condition="m_ptr != 0 &amp;&amp; !m_has_ownership">optional_unique_ptr {*m_ptr} [observer]</DisplayString>
        <Expand>
            <Item Condition="m_ptr != 0" Name="[ptr]">m_ptr</Item>
            <Item Condition="m_ptr != 0" Name="[has ownership]">m_has_ownership</Item>
            <Item Condition="m_ptr != 0" Name="[deleter]">m_del</Item>
        </Expand>
    </Type>

    <Type Name="papilio::small_vector&lt;*,*,*&gt;">
        <Intrinsic Name="dyn_alloc" Expression="(void*)m_p_begin != (void*)m_data.m_first.m_data" />
        <Intrinsic Name="size" Expression="m_p_end - m_p_begin" />
        <Intrinsic Name="capacity" Expression="m_p_capacity - m_p_begin" />
        <DisplayString>{{ size={size()} }}</DisplayString>
        <Expand>
            <Item Name="[dynamically allocated]">dyn_alloc()</Item>
            <Item Name="[size]" ExcludeView="simple">size()</Item>
            <Item Name="[capacity]" ExcludeView="simple">capacity()</Item>
            <Item Name="[allocator]" ExcludeView="simple">m_data.second()</Item>
            <ArrayItems Condition="size() != 0" Optional="true">
                <Size>size()</Size>
                <ValuePointer>m_p_begin</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="papilio::fixed_vector&lt;*,*&gt;">
        <Intrinsic Name="size" Expression="m_size" />
        <Intrinsic Name="capacity" Expression="$T2" />
        <Intrinsic Name="data" Expression="(value_type*)m_buf.m_data" />
        <DisplayString>{{ size={m_size} }}</DisplayString>
        <Expand>
            <Item Name="[size]" ExcludeView="simple">size()</Item>
            <Item Name="[capacity]" ExcludeView="simple">capacity()</Item>
            <ArrayItems Condition="m_size != 0" Optional="true">
                <Size>size()</Size>
                <ValuePointer>data()</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="papilio::fixed_flat_map&lt;*,*&gt;" ExcludeView="ShowElementsByIndex">
        <Intrinsic Name="size" Expression="m_data.m_first.m_size" />
        <DisplayString>{{ size={size()} }}</DisplayString>
        <Expand>
            <Item Name="[size]" ExcludeView="simple">size()</Item>
            <Item Name="[comparator]" ExcludeView="simple">m_data.second()</Item>
            <LinkedListItems Condition="size() != 0" Optional="true">
                <Size>size()</Size>
                <HeadPointer>m_data.m_first.data()</HeadPointer>
                <NextPointer>this + 1</NextPointer>
                <ValueNode Name="[{this->first}]">*this,view(MapHelper)</ValueNode>
            </LinkedListItems>
        </Expand>
    </Type>

    <Type Name="papilio::utf::codepoint">
        <Intrinsic Name="size" Expression="
            (m_data[0] &amp; 0x80) == 0u ? 1u :
            (m_data[0] &amp; 0xE0) == 0xC0 ? 2u :
            (m_data[0] &amp; 0xF0) == 0xE0 ? 3u :
            (m_data[0] &amp; 0xF8) == 0xF0 ? 4u :
            0u"
        />
        <Intrinsic Name="value" Category="Data" ReturnType="unsigned" Expression="
            size() == 1 ? unsigned(m_data[0]) :
            size() == 2 ? ((unsigned(m_data[0]&amp;0x1F) &lt;&lt; 6) | (unsigned(m_data[1])&amp;0x3F)) :
            size() == 3 ? ((unsigned(m_data[0]&amp;0xF) &lt;&lt; 12) | (unsigned(m_data[1]&amp;0x3F) &lt;&lt; 6) | (unsigned(m_data[2]&amp;0x3F))) :
            size() == 4 ? ((unsigned(m_data[0]&amp;0xF) &lt;&lt; 18) | (unsigned(m_data[1]&amp;0x3F) &lt;&lt; 12) | (unsigned(m_data[2]&amp;0x3F) &lt;&lt; 6) | (unsigned(m_data[3]&amp;0x3F))) :
            0u
        "/>
        <DisplayString Condition="size() != 0">{value()} '{m_data, [size()]s8b}'</DisplayString>
        <DisplayString Condition="size() == 0">[invalid]</DisplayString>
        <StringView Condition="size() != 0">m_data, [size()]</StringView>
        <Expand>
            <Item Name="[value]" Condition="size() != 0">value(), X</Item>
            <Synthetic Name="[value]" Condition="size() == 0">
                <DisplayString>invalid</DisplayString>
            </Synthetic>
            <Item Name="[size]" Condition="size() != 0">size()</Item>
            <Synthetic Name="[size]" Condition="size() == 0">
                <DisplayString>invalid</DisplayString>
            </Synthetic>
            <ArrayItems Condition="size() != 0">
                <Size>size()</Size>
                <ValuePointer>(const unsigned char*)m_data</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="papilio::utf::detail::const_str_iter_impl&lt;char&gt;">
        <AlternativeType Name="papilio::utf::detail::const_str_iter_impl&lt;char8_t&gt;"/>
        <DisplayString>{m_str.data()+m_offset, [m_len]}</DisplayString>
        <Expand>
            <Item Name="[ptr]">m_str.data() + m_offset</Item>
            <Item Name="[offset]">m_offset</Item>
            <Item Name="[size]">(size_t)m_len</Item>
        </Expand>
    </Type>
    <Type Name="papilio::utf::detail::const_str_iter_impl&lt;wchar_t&gt;">
        <AlternativeType Name="papilio::utf::detail::const_str_iter_impl&lt;char16_t&gt;"/>
        <DisplayString>{m_str.data()+m_offset, [m_len]}</DisplayString>
        <Expand>
            <Item Name="[ptr]">m_str.data() + m_offset</Item>
            <Item Name="[offset]">m_offset</Item>
            <Item Name="[size]">(size_t)m_len</Item>
        </Expand>
    </Type>
    <Type Name="papilio::utf::detail::const_str_iter_impl&lt;char32_t&gt;">
        <DisplayString>{*m_iter}</DisplayString>
        <Expand>
            <Item Name="[iter]">m_iter</Item>
        </Expand>
    </Type>

    <Type Name="papilio::utf::basic_string_ref&lt;*&gt;">
        <Intrinsic Name="size" Expression="m_str.size()" />
        <Intrinsic Name="data" Expression="m_str.data()" />
        <DisplayString>{data(), [size()]}</DisplayString>
        <StringView>data(), [size()]</StringView>
        <Expand>
            <Item Name="[size]" ExcludeView="simple">size()</Item>
            <ArrayItems>
                <Size>size()</Size>
                <ValuePointer>data()</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="papilio::utf::basic_string_container&lt;*&gt;">
        <Intrinsic Name="size" Expression="m_data.index() == 0 ? m_data._Head.size() : m_data._Tail._Head.size()" />
        <Intrinsic Name="data" Expression="
            m_data.index() == 0 ?
            (m_data._Head.isShortString() ? m_data._Head._Mypair._Myval2._Bx._Buf : m_data._Head._Mypair._Myval2._Bx._Ptr) :
            m_data._Tail._Head.data()
        "/>
        <Intrinsic Name="has_ownership" Expression="m_data.index() == 1" />
        <DisplayString>{data(), [size()]}</DisplayString>
        <StringView>data(), [size()]</StringView>
        <Expand>
            <Item Name="[size]" ExcludeView="simple">size()</Item>
            <Item Name="[has_ownership]" ExcludeView="simple">has_ownership()</Item>
            <ArrayItems>
                <Size>size()</Size>
                <ValuePointer>data()</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="papilio::script::basic_variable&lt;*&gt;">
        <Intrinsic Name="index" Expression="m_var.index()" />
        <DisplayString Condition="index() &lt; 0">[invalid]</DisplayString>
        <DisplayString Condition="index() == 0" Optional="true">{m_var._Head}</DisplayString>
        <DisplayString Condition="index() == 1" Optional="true">{m_var._Tail._Head}</DisplayString>
        <DisplayString Condition="index() == 2" Optional="true">{m_var._Tail._Tail._Head}</DisplayString>
        <DisplayString Condition="index() == 3" Optional="true">{m_var._Tail._Tail._Tail._Head}</DisplayString>
        <Expand>
            <Item Name="index">index()</Item>
            <Item Name="[value]" Condition="index() == 0" Optional="true">m_var._Head</Item>
            <Item Name="[value]" Condition="index() == 1" Optional="true">m_var._Tail._Head</Item>
            <Item Name="[value]" Condition="index() == 2" Optional="true">m_var._Tail._Tail._Head</Item>
            <Item Name="[value]" Condition="index() == 3" Optional="true">m_var._Tail._Tail._Tail._Head</Item>
        </Expand>
    </Type>

    <Type Name="papilio::basic_format_arg&lt;*&gt;::handle">
        <DisplayString>{(handle_impl_base*)m_storage.m_data}</DisplayString>
        <Expand>
            <Item Name="[value]">(handle_impl_base*)m_storage.m_data</Item>
        </Expand>
    </Type>

    <Type Name="papilio::basic_format_arg&lt;*&gt;">
        <DisplayString>{m_val}</DisplayString>
        <Expand>
            <Item Name="[value]">m_val</Item>
        </Expand>
    </Type>
</AutoVisualizer>
