<?xml version="1.0" encoding="utf-8"?>

<!--
Debug Visualizer for Papilio Charontis
Copyright (c) HenryAWE
License: MIT
-->

<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
    <Type Name="papilio::optional_ptr&lt;void,*&gt;">
        <SmartPointer Usage="Minimal">m_ptr</SmartPointer>
        <DisplayString Condition="m_ptr == 0">empty</DisplayString>
        <DisplayString Condition="m_ptr != 0 &amp;&amp; m_has_ownership">optional_ptr void [has ownership]</DisplayString>
        <DisplayString Condition="m_ptr != 0 &amp;&amp; !m_has_ownership">optional_ptr void [observer]</DisplayString>
        <Expand>
            <Item Condition="m_ptr != 0" Name="[ptr]">m_ptr</Item>
            <Item Condition="m_ptr != 0" Name="[has ownership]">m_has_ownership</Item>
            <Item Condition="m_ptr != 0" Name="[deleter]">m_del</Item>
        </Expand>
    </Type>
    <Type Name="papilio::optional_ptr&lt;*&gt;">
        <SmartPointer Usage="Minimal">m_ptr</SmartPointer>
        <DisplayString Condition="m_ptr == 0">empty</DisplayString>
        <DisplayString Condition="m_ptr != 0 &amp;&amp; m_has_ownership">optional_ptr {*m_ptr} [has ownership]</DisplayString>
        <DisplayString Condition="m_ptr != 0 &amp;&amp; !m_has_ownership">optional_ptr {*m_ptr} [observer]</DisplayString>
        <Expand>
            <Item Condition="m_ptr != 0" Name="[ptr]">m_ptr</Item>
            <Item Condition="m_ptr != 0" Name="[has ownership]">m_has_ownership</Item>
            <Item Condition="m_ptr != 0" Name="[deleter]">m_del</Item>
        </Expand>
    </Type>

    <Type Name="papilio::detail::small_vector&lt;*,*,*&gt;">
        <Intrinsic Name="dyn_alloc" Expression="m_dyn_alloc" />
        <Intrinsic Name="size" Expression="m_size" />
        <Intrinsic Name="capacity" Expression="m_capacity" />
        <DisplayString>{{ size={size()} }}</DisplayString>
        <Expand>
            <Item Name="[dynamically allocated]">dyn_alloc()</Item>
            <Item Name="[size]" ExcludeView="simple">size()</Item>
            <Item Name="[capacity]" ExcludeView="simple">capacity()</Item>
            <Item Name="[allocator]" ExcludeView="simple">m_alloc</Item>
            <ArrayItems Condition="size() != 0 &amp;&amp; dyn_alloc()" Optional="true">
                <Size>size()</Size>
                <ValuePointer>m_data.ptr</ValuePointer>
            </ArrayItems>
            <ArrayItems Condition="size() != 0 &amp;&amp; !dyn_alloc()" Optional="true">
                <Size>size()</Size>
                <ValuePointer>(value_type*)m_data.buf</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="papilio::detail::fixed_vector&lt;*,*&gt;">
        <Intrinsic Name="size" Expression="m_size" />
        <Intrinsic Name="capacity" Expression="$T2" />
        <Intrinsic Name="data" Expression="(value_type*)m_buf.m_data" />
        <DisplayString>{{ size={m_size} }}</DisplayString>
        <Expand>
            <Item Name="[size]" ExcludeView="simple">size()</Item>
            <Item Name="[capacity]" ExcludeView="simple">capacity()</Item>
            <ArrayItems Condition="m_size != 0" Optional="true">
                <Size>size()</Size>
                <ValuePointer>data()</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

    <Type Name="papilio::detail::fixed_flat_map&lt;*,*&gt;" ExcludeView="ShowElementsByIndex">
        <Intrinsic Name="size" Expression="m_storage.m_size" />
        <DisplayString>{{ size={size()} }}</DisplayString>
        <Expand>
            <Item Name="[size]" ExcludeView="simple">m_storage.m_size</Item>
            <Item Name="[comparator]" ExcludeView="simple">m_comp</Item>
            <LinkedListItems Condition="size() != 0" Optional="true">
                <Size>size()</Size>
                <HeadPointer>m_storage.data()</HeadPointer>
                <NextPointer>this + 1</NextPointer>
                <ValueNode Name="[{this->first}]">*this,view(MapHelper)</ValueNode>
            </LinkedListItems>
        </Expand>
    </Type>

    <Type Name="papilio::utf8::codepoint">
        <DisplayString>'{m_bytes,s8b}'</DisplayString>
        <Expand>
            <Item Name="[size]" Condition="(m_bytes[0] &amp; 0x80) == 0">1</Item>
            <Item Name="[size]" Condition="(m_bytes[0] &amp; 0xE0) == 0xC0">2</Item>
            <Item Name="[size]" Condition="(m_bytes[0] &amp; 0xF0) == 0xE0">3</Item>
            <Item Name="[size]" Condition="(m_bytes[0] &amp; 0xF8) == 0xF0">4</Item>
        </Expand>
    </Type>
</AutoVisualizer>
